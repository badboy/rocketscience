// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!



#include "mozilla/dom/Rocket.h"
#include "mozilla/dom/RocketscienceShared.h"

namespace mozilla {
namespace dom {

// Cycle collection boilerplate for our interface implementation. `mGlobal` is
// the only member that needs to be cycle-collected; if we ever add any JS
// object members or other interfaces to the class, those should be collected,
// too.
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE(Rocket, mGlobal)
NS_IMPL_CYCLE_COLLECTING_ADDREF(Rocket)
NS_IMPL_CYCLE_COLLECTING_RELEASE(Rocket)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(Rocket)
  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
  NS_INTERFACE_MAP_ENTRY(nsISupports)
NS_INTERFACE_MAP_END

Rocket::Rocket(
  nsIGlobalObject* aGlobal,
  uint64_t aHandle
) : mGlobal(aGlobal), mHandle(aHandle) {}

Rocket::~Rocket() {
  rocketscience_3a9e_RustError err = {0, nullptr};
  ffi_rocketscience_3a9e_Rocket_object_free(mHandle, &err);
  MOZ_ASSERT(!err.mCode);
}

JSObject* Rocket::WrapObject(
  JSContext* aCx,
  JS::Handle<JSObject*> aGivenProto
) {
  return dom::Rocket_Binding::Wrap(aCx, this, aGivenProto);
}

/* static */
already_AddRefed<Rocket> Rocket::Constructor(
  GlobalObject& aGlobal,
  const nsAString& name
) {
  rocketscience_3a9e_RustError err = {0, nullptr};
  const uint64_t handle =rocketscience_3a9e_Rocket_new(
    rocketscience_detail::ViaFfi<nsAString, rocketscience_3a9e_RustBuffer, false>::Lower(name)
    , &err
  );
  if (err.mCode) {
    MOZ_ASSERT(false);
    return nullptr;
  }
  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(aGlobal.GetAsSupports());
  auto result = MakeRefPtr<Rocket>(global, handle);
  return result.forget();
}
void Rocket::Show(
  nsAString& aRetVal
) {
  rocketscience_3a9e_RustError err = {0, nullptr};
  const rocketscience_3a9e_RustBuffer loweredRetVal_ =rocketscience_3a9e_Rocket_show(
    mHandle
    , &err
  );
  if (err.mCode) {
    MOZ_ASSERT(false);
    return ;
  }
  DebugOnly<bool> ok_ = rocketscience_detail::ViaFfi<nsAString, rocketscience_3a9e_RustBuffer, false>::Lift(loweredRetVal_, aRetVal);
  MOZ_ASSERT(ok_);
}
bool Rocket::Launch(
  ErrorResult& aRv
) {
  rocketscience_3a9e_RustError err = {0, nullptr};
  const int8_t loweredRetVal_ =rocketscience_3a9e_Rocket_launch(
    mHandle
    , &err
  );
  if (err.mCode) {
    aRv.ThrowOperationError(nsDependentCString(err.mMessage));
    return false;
  }
  bool retVal_;
  DebugOnly<bool> ok_ = rocketscience_detail::ViaFfi<bool, int8_t, false>::Lift(loweredRetVal_, retVal_);
  MOZ_ASSERT(ok_);
  return retVal_;
}
void Rocket::Add(
  const Part& part
) {
  rocketscience_3a9e_RustError err = {0, nullptr};
  rocketscience_3a9e_Rocket_add(
    mHandle,
    rocketscience_detail::ViaFfi<Part, rocketscience_3a9e_RustBuffer, false>::Lower(part)
    , &err
  );
  if (err.mCode) {
    MOZ_ASSERT(false);
    return ;
  }
}
void Rocket::LockSteering(
  Direction direction
) {
  rocketscience_3a9e_RustError err = {0, nullptr};
  rocketscience_3a9e_Rocket_lock_steering(
    mHandle,
    rocketscience_detail::ViaFfi<Direction, rocketscience_3a9e_RustBuffer, false>::Lower(direction)
    , &err
  );
  if (err.mCode) {
    MOZ_ASSERT(false);
    return ;
  }
}

}  // namespace dom
}  // namespace mozilla