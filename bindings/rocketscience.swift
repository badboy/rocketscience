// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

import Foundation

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            try! rustCall(UniffiInternalError.unknown("RustBuffer.init")) { err in
                ffi_rocketscience_3a9e_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), err)
            }
        }
        // Ref https://github.com/mozilla/uniffi-rs/issues/334 for the extra "padding" arg.
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data, padding: 0)
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall(UniffiInternalError.unknown("RustBuffer.deallocate")) { err in
            ffi_rocketscience_3a9e_rustbuffer_free(self, err)
        }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        // Ref https://github.com/mozilla/uniffi-rs/issues/334 for the extra "padding" args.
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress, padding: 0, padding2: 0)
    }
}

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Types conforming to `Serializable` can be read and written in a bytebuffer.
private protocol Serializable {
    func write(into: Writer)
    static func read(from: Reader) throws -> Self
}

// Types confirming to `ViaFfi` can be transferred back-and-for over the FFI.
// This is analogous to the Rust trait of the same name.
private protocol ViaFfi: Serializable {
    associatedtype FfiType
    static func lift(_ v: FfiType) throws -> Self
    func lower() -> FfiType
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol Primitive {}

private extension Primitive {
    typealias FfiType = Self

    static func lift(_ v: Self) throws -> Self {
        return v
    }

    func lower() -> Self {
        return self
    }
}

// Types conforming to `ViaFfiUsingByteBuffer` lift and lower into a bytebuffer.
// Use this for complex types where it's hard to write a custom lift/lower.
private protocol ViaFfiUsingByteBuffer: Serializable {}

private extension ViaFfiUsingByteBuffer {
    typealias FfiType = RustBuffer

    static func lift(_ buf: RustBuffer) throws -> Self {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try Self.read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    func lower() -> RustBuffer {
        let writer = Writer()
        write(into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// Implement our protocols for the built-in types that we use.

extension String: ViaFfi {
    fileprivate typealias FfiType = RustBuffer

    fileprivate static func lift(_ v: FfiType) throws -> Self {
        defer {
            try! rustCall(UniffiInternalError.unknown("String.lift")) { err in
                ffi_rocketscience_3a9e_rustbuffer_free(v, err)
            }
        }
        if v.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: v.data!, count: Int(v.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    fileprivate func lower() -> FfiType {
        return utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                let bytes = ForeignBytes(bufferPointer: buf)
                return try! rustCall(UniffiInternalError.unknown("String.lower")) { err in
                    ffi_rocketscience_3a9e_rustbuffer_from_bytes(bytes, err)
                }
            }
        }
    }

    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(utf8.count)
        buf.writeInt(len)
        buf.writeBytes(utf8)
    }
}

extension Bool: ViaFfi {
    fileprivate typealias FfiType = Int8

    fileprivate static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }

    fileprivate static func lift(_ v: Int8) throws -> Bool {
        return v != 0
    }

    fileprivate func lower() -> Int8 {
        return self ? 1 : 0
    }
}

extension UInt8: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> UInt8 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension Int8: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Int8 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension UInt16: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> UInt16 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension Int16: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Int16 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension UInt32: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> UInt32 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension Int32: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Int32 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension UInt64: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> UInt64 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension Int64: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Int64 {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension Float: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Float {
        return try lift(buf.readFloat())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeFloat(lower())
    }
}

extension Double: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Double {
        return try lift(buf.readDouble())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeDouble(lower())
    }
}

extension Optional: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Wrapped: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try Wrapped.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }

    fileprivate func write(into buf: Writer) {
        guard let value = self else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        value.write(into: buf)
    }
}

extension Array: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Element: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        var seq = [Element]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try Element.read(from: buf))
        }
        return seq
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(count)
        buf.writeInt(len)
        for item in self {
            item.write(into: buf)
        }
    }
}

extension Dictionary: ViaFfiUsingByteBuffer, ViaFfi, Serializable where Key == String, Value: Serializable {
    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        var dict = [String: Value]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            dict[try String.read(from: buf)] = try Value.read(from: buf)
        }
        return dict
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(count)
        buf.writeInt(len)
        for (key, value) in self {
            key.write(into: buf)
            value.write(into: buf)
        }
    }
}

// Public interface members begin here.

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Direction: Equatable {
    case up
    case down
}

extension Direction: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Direction {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .up
        case 2: return .down
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case .up:
            buf.writeInt(Int32(1))

        case .down:
            buf.writeInt(Int32(2))
        }
    }
}

private protocol RustError: LocalizedError {
    static func fromConsuming(_ rustError: NativeRustError) throws -> Self?
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: RustError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case emptyResult
    case unknown(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .emptyResult: return "Unexpected nil returned from FFI function"
        case let .unknown(message): return "FFI function returned unknown error: \(message)"
        }
    }

    fileprivate static func fromConsuming(_ rustError: NativeRustError) throws -> Self? {
        let message = rustError.message
        defer {
            if message != nil {
                try! rustCall(UniffiInternalError.unknown("UniffiInternalError.fromConsuming")) { err in
                    ffi_rocketscience_3a9e_string_free(message!, err)
                }
            }
        }
        switch rustError.code {
        case 0: return nil
        default: return .unknown(String(cString: message!))
        }
    }
}

public enum LaunchError: RustError {
    case NoError

    case RocketLaunch(message: String)

    /// Our implementation of the localizedError protocol
    public var errorDescription: String? {
        switch self {
        case let .RocketLaunch(message):
            return "LaunchError.RocketLaunch: \(message)"

        default:
            return nil
        }
    }

    // The name is attempting to indicate that we free message if it
    // existed, and that it's a very bad idea to touch it after you call this
    // function
    fileprivate static func fromConsuming(_ rustError: NativeRustError) throws -> Self? {
        let message = rustError.message
        defer {
            if message != nil {
                try! rustCall(UniffiInternalError.unknown("LaunchError.fromConsuming")) { err in
                    ffi_rocketscience_3a9e_string_free(message!, err)
                }
            }
        }
        switch rustError.code {
        case 0:
            return nil

        case 1:
            return .RocketLaunch(message: String(cString: message!))

        default:
            return nil
        }
    }
}

private func rustCall<T, E: RustError>(_ err: E, _ cb: (UnsafeMutablePointer<NativeRustError>) throws -> T?) throws -> T {
    return try unwrap(err) { native_err in
        try cb(native_err)
    }
}

private func nullableRustCall<T, E: RustError>(_ err: E, _ cb: (UnsafeMutablePointer<NativeRustError>) throws -> T?) throws -> T? {
    return try tryUnwrap(err) { native_err in
        try cb(native_err)
    }
}

@discardableResult
private func unwrap<T, E: RustError>(_ err: E, _ callback: (UnsafeMutablePointer<NativeRustError>) throws -> T?) throws -> T {
    guard let result = try tryUnwrap(err, callback) else {
        throw UniffiInternalError.emptyResult
    }
    return result
}

@discardableResult
private func tryUnwrap<T, E: RustError>(_: E, _ callback: (UnsafeMutablePointer<NativeRustError>) throws -> T?) throws -> T? {
    var native_err = NativeRustError(code: 0, message: nil)
    let returnedVal = try callback(&native_err)
    if let retErr = try E.fromConsuming(native_err) {
        throw retErr
    }
    return returnedVal
}

public struct Part: Equatable, Hashable {
    public let name: String
    public let cost: UInt64
    public let weight: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, cost: UInt64, weight: UInt64) {
        self.name = name
        self.cost = cost
        self.weight = weight
    }

    public static func == (lhs: Part, rhs: Part) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.cost != rhs.cost {
            return false
        }
        if lhs.weight != rhs.weight {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(cost)
        hasher.combine(weight)
    }
}

extension Part: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Part {
        return try Part(
            name: String.read(from: buf),
            cost: UInt64.read(from: buf),
            weight: UInt64.read(from: buf)
        )
    }

    fileprivate func write(into buf: Writer) {
        name.write(into: buf)
        cost.write(into: buf)
        weight.write(into: buf)
    }
}

public protocol RocketProtocol {
    func show() -> String
    func launch() throws -> Bool
    func add(part: Part)
    func lockSteering(direction: Direction)
}

public class Rocket: RocketProtocol {
    private let handle: UInt64

    private init(fromRawHandle handle: UInt64) {
        self.handle = handle
    }

    public convenience init(name: String) {
        self.init(fromRawHandle: try! rustCall(
            UniffiInternalError.unknown("rustCall")

        ) { err in
            rocketscience_3a9e_Rocket_new(name.lower(), err)
        })
    }

    deinit {
        try! rustCall(UniffiInternalError.unknown("deinit")) { err in
            ffi_rocketscience_3a9e_Rocket_object_free(handle, err)
        }
    }

    public func show() -> String {
        let _retval = try! rustCall(
            UniffiInternalError.unknown("rustCall")
        ) { err in
            rocketscience_3a9e_Rocket_show(self.handle, err)
        }
        return try! String.lift(_retval)
    }

    public func launch() throws -> Bool {
        let _retval = try rustCall(
            LaunchError.NoError
        ) { err in
            rocketscience_3a9e_Rocket_launch(self.handle, err)
        }
        return try Bool.lift(_retval)
    }

    public func add(part: Part) {
        try! rustCall(
            UniffiInternalError.unknown("rustCall")
        ) { err in
            rocketscience_3a9e_Rocket_add(self.handle, part.lower(), err)
        }
    }

    public func lockSteering(direction: Direction) {
        try! rustCall(
            UniffiInternalError.unknown("rustCall")
        ) { err in
            rocketscience_3a9e_Rocket_lock_steering(self.handle, direction.lower(), err)
        }
    }
}
