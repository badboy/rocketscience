// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// Check for compatibility between `uniffi` and `uniffi_bindgen` versions.
// Note that we have an error message on the same line as the assertion.
// This is important, because if the assertion fails, the compiler only
// seems to show that single line as context for the user.
uniffi::assert_compatible_version!("0.17.0"); // Please check that you depend on version 0.17.0 of the `uniffi` crate.

// Everybody gets basic buffer support, since it's needed for passing complex types over the FFI.
//
// See `uniffi/src/ffi/rustbuffer.rs` for documentation on these functions

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub extern "C" fn ffi_rocketscience_b310_rustbuffer_alloc(
    size: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::ffi::uniffi_rustbuffer_alloc(size, call_status)
}

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub unsafe extern "C" fn ffi_rocketscience_b310_rustbuffer_from_bytes(
    bytes: uniffi::ForeignBytes,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::ffi::uniffi_rustbuffer_from_bytes(bytes, call_status)
}

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub unsafe extern "C" fn ffi_rocketscience_b310_rustbuffer_free(
    buf: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::ffi::uniffi_rustbuffer_free(buf, call_status)
}

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub unsafe extern "C" fn ffi_rocketscience_b310_rustbuffer_reserve(
    buf: uniffi::RustBuffer,
    additional: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::ffi::uniffi_rustbuffer_reserve(buf, additional, call_status)
}

// Error definitions, corresponding to `error` in the UDL.

#[doc(hidden)]
pub struct FfiConverterTypeLaunchError;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeLaunchError {
    type RustType = LaunchError;

    // For "flat" error enums, we stringify the error on the Rust side and surface that
    // as the error message in the foreign language.

    fn write(obj: LaunchError, buf: &mut std::vec::Vec<u8>) {
        use uniffi::deps::bytes::BufMut;
        let msg = obj.to_string();
        match obj {
            LaunchError::RocketLaunch { .. } => {
                buf.put_i32(1);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
        };
    }

    fn try_read(_buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<LaunchError> {
        // It's not currently possible to send errors from the foreign language *into* Rust.
        panic!("try_read not supported for flat errors");
    }
}

impl uniffi::FfiError for FfiConverterTypeLaunchError {}

// Enum defitions, corresponding to `enum` in UDL.

#[doc(hidden)]
pub struct FfiConverterTypeDirection;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeDirection {
    type RustType = Direction;

    fn write(obj: Self::RustType, buf: &mut std::vec::Vec<u8>) {
        use uniffi::deps::bytes::BufMut;
        match obj {
            Direction::Up {} => {
                buf.put_i32(1);
            }
            Direction::Down {} => {
                buf.put_i32(2);
            }
        };
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<Direction> {
        use uniffi::deps::bytes::Buf;
        uniffi::check_remaining(buf, 4)?;
        Ok(match buf.get_i32() {
            1 => Direction::Up,
            2 => Direction::Down,
            v => uniffi::deps::anyhow::bail!("Invalid Direction enum value: {}", v),
        })
    }
}

// Record definitions, implemented as method-less structs, corresponding to `dictionary` objects.

#[doc(hidden)]
pub struct FfiConverterTypePart;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypePart {
    type RustType = Part;

    fn write(obj: Part, buf: &mut std::vec::Vec<u8>) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        <String as uniffi::FfiConverter>::write(obj.name, buf);
        <u64 as uniffi::FfiConverter>::write(obj.cost, buf);
        <u64 as uniffi::FfiConverter>::write(obj.weight, buf);
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<Part> {
        Ok(Part {
            name: <String as uniffi::FfiConverter>::try_read(buf)?,
            cost: <u64 as uniffi::FfiConverter>::try_read(buf)?,
            weight: <u64 as uniffi::FfiConverter>::try_read(buf)?,
        })
    }
}

// Top level functions, corresponding to UDL `namespace` functions.// Object definitions, corresponding to UDL `interface` definitions.

// For each Object definition, we assume the caller has provided an appropriately-shaped `struct T`
// with an `impl` for each method on the object. We create an `Arc<T>` for "safely" handing out
// references to these structs to foreign language code, and we provide a `pub extern "C"` function
// corresponding to each method.
//
// (Note that "safely" is in "scare quotes" - that's because we use functions on an `Arc` that
// that are inherently unsafe, but the code we generate is safe in practice.)
//
// If the caller's implementation of the struct does not match with the methods or types specified
// in the UDL, then the rust compiler will complain with a (hopefully at least somewhat helpful!)
// error message when processing this generated code.

// All Object structs must be `Sync + Send`. The generated scaffolding will fail to compile
// if they are not, but unfortunately it fails with an unactionably obscure error message.
// By asserting the requirement explicitly, we help Rust produce a more scrutable error message
// and thus help the user debug why the requirement isn't being met.
uniffi::deps::static_assertions::assert_impl_all!(Rocket: Sync, Send);

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn ffi_rocketscience_b310_Rocket_object_free(
    ptr: *const std::os::raw::c_void,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::call_with_output(call_status, || {
        assert!(!ptr.is_null());
        drop(unsafe { std::sync::Arc::from_raw(ptr as *const Rocket) })
    })
}
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn rocketscience_b310_Rocket_new(
    name: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> *const std::os::raw::c_void /* *const Rocket */ {
    uniffi::deps::log::debug!("rocketscience_b310_Rocket_new");

    // If the constructor does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.

    uniffi::call_with_output(call_status, || {
        let _new = Rocket::new(match <String as uniffi::FfiConverter>::try_lift(name) {
            Ok(val) => val,

            Err(err) => panic!("Failed to convert arg '{}': {}", "name", err),
        });
        let _arc = std::sync::Arc::new(_new);
        <std::sync::Arc<Rocket> as uniffi::FfiConverter>::lower(_arc)
    })
}
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn rocketscience_b310_Rocket_show(
    ptr: *const std::os::raw::c_void,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::deps::log::debug!("rocketscience_b310_Rocket_show");
    // If the method does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.

    uniffi::call_with_output(call_status, || {
        let retval = Rocket::show(
            match <std::sync::Arc<Rocket> as uniffi::FfiConverter>::try_lift(ptr) {
                Ok(ref val) => val,

                Err(err) => panic!("Failed to convert arg '{}': {}", "ptr", err),
            },
        );
        <String as uniffi::FfiConverter>::lower(retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn rocketscience_b310_Rocket_launch(
    ptr: *const std::os::raw::c_void,
    call_status: &mut uniffi::RustCallStatus,
) -> i8 {
    uniffi::deps::log::debug!("rocketscience_b310_Rocket_launch");
    // If the method does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.
    uniffi::call_with_result(call_status, || {
        let _retval = Rocket::launch(
            match <std::sync::Arc<Rocket> as uniffi::FfiConverter>::try_lift(ptr) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeLaunchError,
                    >(err, "ptr"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeLaunchError as uniffi::FfiConverter>::lower)?;
        Ok(<bool as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn rocketscience_b310_Rocket_add(
    ptr: *const std::os::raw::c_void,
    part: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::deps::log::debug!("rocketscience_b310_Rocket_add");
    // If the method does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.

    uniffi::call_with_output(call_status, || {
        Rocket::add(
            match <std::sync::Arc<Rocket> as uniffi::FfiConverter>::try_lift(ptr) {
                Ok(ref val) => val,

                Err(err) => panic!("Failed to convert arg '{}': {}", "ptr", err),
            },
            match <FfiConverterTypePart as uniffi::FfiConverter>::try_lift(part) {
                Ok(val) => val,

                Err(err) => panic!("Failed to convert arg '{}': {}", "part", err),
            },
        )
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn rocketscience_b310_Rocket_lock_steering(
    ptr: *const std::os::raw::c_void,
    direction: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::deps::log::debug!("rocketscience_b310_Rocket_lock_steering");
    // If the method does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.

    uniffi::call_with_output(call_status, || {
        Rocket::lock_steering(
            match <std::sync::Arc<Rocket> as uniffi::FfiConverter>::try_lift(ptr) {
                Ok(ref val) => val,

                Err(err) => panic!("Failed to convert arg '{}': {}", "ptr", err),
            },
            match <FfiConverterTypeDirection as uniffi::FfiConverter>::try_lift(direction) {
                Ok(val) => val,

                Err(err) => panic!("Failed to convert arg '{}': {}", "direction", err),
            },
        )
    })
}

// Callback Interface definitions, corresponding to UDL `callback interface` definitions.

// External and Wrapped types
// Support for external types.

// Types with an external `FfiConverter`...

// For custom scaffolding types we need to generate an FfiConverterType based on the
// UniffiCustomTypeConverter implementation that the library supplies

// The `reexport_uniffi_scaffolding` macro
// Code to re-export the UniFFI scaffolding functions.
//
// Rust won't always re-export the functions from dependencies
// ([rust-lang#50007](https://github.com/rust-lang/rust/issues/50007))
//
// A workaround for this is to have the dependent crate reference a function from its dependency in
// an extern "C" function. This is clearly hacky and brittle, but at least we have some unittests
// that check if this works (fixtures/reexport-scaffolding-macro).
//
// The main way we use this macro is for that contain multiple UniFFI components (libxul,
// megazord).  The combined library has a cargo dependency for each component and calls
// uniffi_reexport_scaffolding!() for each one.

#[doc(hidden)]
pub fn uniffi_reexport_hack() {}

#[macro_export]
macro_rules! uniffi_reexport_scaffolding {
    () => {
        #[doc(hidden)]
        #[no_mangle]
        pub extern "C" fn rocketscience_uniffi_reexport_hack() {
            $crate::uniffi_reexport_hack()
        }
    };
}
