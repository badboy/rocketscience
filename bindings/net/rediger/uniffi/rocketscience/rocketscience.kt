// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package net.rediger.uniffi.rocketscience;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.atomic.AtomicReference
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data", "padding")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null
    // Ref https://github.com/mozilla/uniffi-rs/issues/334 for this weird "padding" field.
    @JvmField var padding: Long = 0

    class ByValue : RustBuffer(), Structure.ByValue

    companion object {
        internal fun alloc(size: Int = 0) = rustCall(InternalError.ByReference()) { err ->
            _UniFFILib.INSTANCE.ffi_rocketscience_3a9e_rustbuffer_alloc(size, err)
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall(InternalError.ByReference()) { err ->
            _UniFFILib.INSTANCE.ffi_rocketscience_3a9e_rustbuffer_free(buf, err)
        }

        internal fun reserve(buf: RustBuffer.ByValue, additional: Int) = rustCall(InternalError.ByReference()) { err ->
            _UniFFILib.INSTANCE.ffi_rocketscience_3a9e_rustbuffer_reserve(buf, additional, err)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data", "padding", "padding2")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null
    // Ref https://github.com/mozilla/uniffi-rs/issues/334 for these weird "padding" fields.
    @JvmField var padding: Long = 0
    @JvmField var padding2: Int = 0

    class ByValue : ForeignBytes(), Structure.ByValue
}


// A helper for structured writing of data into a `RustBuffer`.
// This is very similar to `java.nio.ByteBuffer` but it knows how to grow
// the underlying `RustBuffer` on demand.
//
// TODO: we should benchmark writing things into a `RustBuffer` versus building
// up a bytearray and then copying it across.

class RustBufferBuilder() {
    var rbuf = RustBuffer.ByValue()
    var bbuf: ByteBuffer? = null

    init {
        val rbuf = RustBuffer.alloc(16) // Totally arbitrary initial size
        rbuf.writeField("len", 0)
        this.setRustBuffer(rbuf)
    }

    internal fun setRustBuffer(rbuf: RustBuffer.ByValue) {
        this.rbuf = rbuf
        this.bbuf = this.rbuf.data?.getByteBuffer(0, this.rbuf.capacity.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
            it.position(rbuf.len)
        }
    }

    fun finalize() : RustBuffer.ByValue {
        val rbuf = this.rbuf
        // Ensure that the JVM-level field is written through to native memory
        // before turning the buffer, in case its recipient uses it in a context
        // JNA doesn't apply its automatic synchronization logic.
        rbuf.writeField("len", this.bbuf!!.position())
        this.setRustBuffer(RustBuffer.ByValue())
        return rbuf
    }

    fun discard() {
        val rbuf = this.finalize()
        RustBuffer.free(rbuf)
    }

    internal fun reserve(size: Int, write: (ByteBuffer) -> Unit) {
        // TODO: this will perform two checks to ensure we're not overflowing the buffer:
        // one here where we check if it needs to grow, and another when we call a write
        // method on the ByteBuffer. It might be cheaper to use exception-driven control-flow
        // here, trying the write and growing if it throws a `BufferOverflowException`.
        // Benchmarking needed.
        if (this.bbuf!!.position() + size > this.rbuf.capacity) {
            rbuf.writeField("len", this.bbuf!!.position())
            this.setRustBuffer(RustBuffer.reserve(this.rbuf, size))
        }
        write(this.bbuf!!)
    }

    fun putByte(v: Byte) {
        this.reserve(1) { bbuf ->
            bbuf.put(v)
        }
    }

    fun putShort(v: Short) {
        this.reserve(2) { bbuf ->
            bbuf.putShort(v)
        }
    }

    fun putInt(v: Int) {
        this.reserve(4) { bbuf ->
            bbuf.putInt(v)
        }
    }

    fun putLong(v: Long) {
        this.reserve(8) { bbuf ->
            bbuf.putLong(v)
        }
    }

    fun putFloat(v: Float) {
        this.reserve(4) { bbuf ->
            bbuf.putFloat(v)
        }
    }

    fun putDouble(v: Double) {
        this.reserve(8) { bbuf ->
            bbuf.putDouble(v)
        }
    }

    fun put(v: ByteArray) {
        this.reserve(v.size) { bbuf ->
            bbuf.put(v)
        }
    }
}

// Helpers for reading primitive data types from a bytebuffer.

internal fun<T> liftFromRustBuffer(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> T): T {
    val buf = rbuf.asByteBuffer()!!
    try {
       val item = readItem(buf)
       if (buf.hasRemaining()) {
           throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
       }
       return item
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun<T> lowerIntoRustBuffer(v: T, writeItem: (T, RustBufferBuilder) -> Unit): RustBuffer.ByValue {
    // TODO: maybe we can calculate some sort of initial size hint?
    val buf = RustBufferBuilder()
    try {
        writeItem(v, buf)
        return buf.finalize()
    } catch (e: Throwable) {
        buf.discard()
        throw e
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.




internal fun String.Companion.lift(rbuf: RustBuffer.ByValue): String {
    try {
        val byteArr = ByteArray(rbuf.len)
        rbuf.asByteBuffer()!!.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun String.Companion.read(buf: ByteBuffer): String {
    val len = buf.getInt()
    val byteArr = ByteArray(len)
    buf.get(byteArr)
    return byteArr.toString(Charsets.UTF_8)
}

internal fun String.lower(): RustBuffer.ByValue {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
    // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
    val rbuf = RustBuffer.alloc(byteArr.size)
    rbuf.asByteBuffer()!!.put(byteArr)
    return rbuf
}

internal fun String.write(buf: RustBufferBuilder) {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    buf.putInt(byteArr.size)
    buf.put(byteArr)
}





























@ExperimentalUnsignedTypes
internal fun ULong.Companion.lift(v: Long): ULong {
    return v.toULong()
}

@ExperimentalUnsignedTypes
internal fun ULong.Companion.read(buf: ByteBuffer): ULong {
    return ULong.lift(buf.getLong())
}

@ExperimentalUnsignedTypes
internal fun ULong.lower(): Long {
    return this.toLong()
}

@ExperimentalUnsignedTypes
internal fun ULong.write(buf: RustBufferBuilder) {
    buf.putLong(this.toLong())
}





internal fun Boolean.Companion.lift(v: Byte): Boolean {
    return v.toInt() != 0
}

internal fun Boolean.Companion.read(buf: ByteBuffer): Boolean {
    return Boolean.lift(buf.get())
}

internal fun Boolean.lower(): Byte {
    return if (this) 1.toByte() else 0.toByte()
}

internal fun Boolean.write(buf: RustBufferBuilder) {
    buf.putByte(this.lower())
}




@Synchronized
fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.${componentName}.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "rocketscience"
}

inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy { 
            loadIndirect<_UniFFILib>(componentName = "rocketscience")
            
            
        }
    }

    fun ffi_rocketscience_3a9e_Rocket_object_free(handle: Long
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun rocketscience_3a9e_Rocket_new(name: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Long

    fun rocketscience_3a9e_Rocket_show(handle: Long
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun rocketscience_3a9e_Rocket_launch(handle: Long
    , uniffi_out_err: Structure.ByReference
    ): Byte

    fun rocketscience_3a9e_Rocket_add(handle: Long,part: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun rocketscience_3a9e_Rocket_lock_steering(handle: Long,direction: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun ffi_rocketscience_3a9e_rustbuffer_alloc(size: Int
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun ffi_rocketscience_3a9e_rustbuffer_from_bytes(bytes: ForeignBytes.ByValue
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun ffi_rocketscience_3a9e_rustbuffer_free(buf: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun ffi_rocketscience_3a9e_rustbuffer_reserve(buf: RustBuffer.ByValue,additional: Int
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun ffi_rocketscience_3a9e_string_free(cstr: Pointer
    , uniffi_out_err: Structure.ByReference
    ): Unit

    
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.


abstract class FFIObject(
    private val handle: AtomicLong
) {
    open fun destroy() {
        this.handle.set(0L)
    }

    internal inline fun <R> callWithHandle(block: (handle: Long) -> R) =
        this.handle.get().let { handle -> 
            if (handle != 0L) {
                block(handle)
            } else {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
        }
}

inline fun <T : FFIObject, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            this.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }





// Public interface members begin here.
// Public facing enums





enum class Direction {
    UP,DOWN;

    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): Direction {
            return liftFromRustBuffer(rbuf) { buf -> Direction.read(buf) }
        }

        internal fun read(buf: ByteBuffer) =
            try { values()[buf.getInt() - 1] }
            catch (e: IndexOutOfBoundsException) {
                throw RuntimeException("invalid enum value, something is very wrong!!", e)
            }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
        buf.putInt(this.ordinal + 1)
    }
}

// Error definitions
interface RustErrorReference : Structure.ByReference {
    fun isFailure(): Boolean
    fun<E: Exception> intoException(): E
    fun ensureConsumed()
    fun getMessage(): String?
    fun consumeErrorMessage(): String
}

@Structure.FieldOrder("code", "message")
internal open class RustError : Structure() {
   open class ByReference: RustError(), RustErrorReference

    @JvmField var code: Int = 0
    @JvmField var message: Pointer? = null

    /**
     * Does this represent success?
     */
    fun isSuccess(): Boolean {
        return code == 0
    }

    /**
     * Does this represent failure?
     */
    fun isFailure(): Boolean {
        return code != 0
    }

    @Synchronized
    fun ensureConsumed() {
        if (this.message != null) {
            rustCall(InternalError.ByReference()) { err ->
                _UniFFILib.INSTANCE.ffi_rocketscience_3a9e_string_free(this.message!!, err)
             }
            this.message = null
        }
    }

    /**
     * Get the error message or null if there is none.
     */
    fun getMessage(): String? {
        return this.message?.getString(0, "utf8")
    }

    /**
     * Get and consume the error message, or null if there is none.
     */
    @Synchronized
    fun consumeErrorMessage(): String {
        val result = this.getMessage()
        if (this.message != null) {
            this.ensureConsumed()
        }
        if (result == null) {
            throw NullPointerException("consumeErrorMessage called with null message!")
        }
        return result
    }

    @Suppress("ReturnCount", "TooGenericExceptionThrown")
    open fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        this.consumeErrorMessage()
        throw RuntimeException("Generic errors are not implemented yet")
    }
}

internal open class InternalError : RustError() {
    class ByReference: InternalError(), RustErrorReference

    @Suppress("ReturnCount", "TooGenericExceptionThrown", "UNCHECKED_CAST")
    override fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        val message = this.consumeErrorMessage()
        return InternalException(message) as E
    }
}

class InternalException(message: String) : Exception(message)
internal open class LaunchError : RustError() {
    class ByReference: LaunchError(), RustErrorReference

    @Suppress("ReturnCount", "TooGenericExceptionThrown", "UNCHECKED_CAST")
    override fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        val message = this.consumeErrorMessage()
        when (code) {
            1 -> return LaunchErrorException.RocketLaunch(message) as E
            else -> throw RuntimeException("Invalid error received: $code, $message")
        }
    }
}

open class LaunchErrorException(message: String) : Exception(message) {
    class RocketLaunch(msg: String) : LaunchErrorException(msg)
    
}



// Helpers for calling Rust with errors:
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
private inline fun <U, E: RustErrorReference> nullableRustCall(callback: (E) -> U?, err: E): U? {
    try {
        val ret = callback(err)
        if (err.isFailure()) {
            throw err.intoException()
        }
        return ret
    } finally {
        // This only matters if `callback` throws (or does a non-local return, which
        // we currently don't do)
        err.ensureConsumed()
    }
}

private inline fun <U, E: RustErrorReference> rustCall(err: E, callback: (E) -> U?): U {
    return nullableRustCall(callback, err)!!
}

// Public facing records
data class Part (
    val name: String, 
    val cost: ULong, 
    val weight: ULong 
) {
    companion object {
        // XXX TODO: put this in a superclass maybe?
        internal fun lift(rbuf: RustBuffer.ByValue): Part {
            return liftFromRustBuffer(rbuf) { buf -> Part.read(buf) }
        }

        internal fun read(buf: ByteBuffer): Part {
            return Part(
            String.read(buf),
            ULong.read(buf),
            ULong.read(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.name.write(buf)
            this.cost.write(buf)
            this.weight.write(buf)
    }
}


// Namespace functions


// Objects

public interface RocketInterface {
    fun show(): String
    fun launch(): Boolean
    fun add(part: Part )
    fun lockSteering(direction: Direction )
    
}

class Rocket(
    handle: Long
) : FFIObject(AtomicLong(handle)), RocketInterface {
    constructor(name: String ) :
        this(rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.rocketscience_3a9e_Rocket_new(name.lower() ,err)
})

    /**
     * Disconnect the object from the underlying Rust object.
     * 
     * It can be called more than once, but once called, interacting with the object 
     * causes an `IllegalStateException`.
     * 
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override fun destroy() {
        try {
            callWithHandle {
                super.destroy() // poison the handle so no-one else can use it before we tell rust.
                rustCall(InternalError.ByReference()) { err ->
                    _UniFFILib.INSTANCE.ffi_rocketscience_3a9e_Rocket_object_free(it, err)
                }
            }
        } catch (e: IllegalStateException) {
            // The user called this more than once. Better than less than once.
        }
    }

    override fun show(): String =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.rocketscience_3a9e_Rocket_show(it,  err)
}
        }.let {
            String.lift(it)
        }
    
    override fun launch(): Boolean =
        callWithHandle {
rustCall(
    LaunchError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.rocketscience_3a9e_Rocket_launch(it,  err)
}
        }.let {
            Boolean.lift(it)
        }
    
    override fun add(part: Part ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.rocketscience_3a9e_Rocket_add(it, part.lower() , err)
}
        }
    
    override fun lockSteering(direction: Direction ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.rocketscience_3a9e_Rocket_lock_steering(it, direction.lower() , err)
}
        }
    
    

    
}


// Callback Interfaces


